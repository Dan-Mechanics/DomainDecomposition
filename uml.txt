@startuml

class FSM
{
    - states : readonly Dictionary<Type, IState>
    -currentState: IState
    
    + AddState(key: Type, value: IState)
    + TransitionTo(type: Type)
    + Update()
}

interface IState 
{
    + Setup(fsm : FSM)
    + EnterState()
    + Update()
    + ExitState()
}


class Timer
{
    + onTimerComplete: event Action
    
    + void SetTimer(value: float)
}

class HealthStateHandler 
{
    - eventHandler : readonly EventHandler
    - fsm: readonly FSM
    
    + Setup()
    + Update()
    + Interact(string)
}

abstract class HealthState implements IState 
{
    + onEnter: event Action
    + onExit: event Action
    # eventHandler: EventHandler
    # fsm: FSM
    
    + void ReferenceHandler(eventHandler: EventHandler)
    + virtual Setup(fsm : FSM)
    + virtual EnterState()
    + virtual Update()
    + virtual ExitState()
}


class HealthyState extends HealthState 
{
    + override Setup(fsm : FSM)
    + override EnterState()
    + override Update()
    + override ExitState()
}

class InjuredState extends HealthState 
{
    + override Setup(fsm : FSM)
    + override EnterState()
    + override Update()
    + override ExitState()
}

class DeepWoundState extends HealthState 
{
    - timer : Timer
    
    + override Setup(fsm : FSM)
    + override EnterState()
    + override Update()
    + override ExitState()
}

class DownedState extends HealthState 
{
    -recoveryProgress: float
    
    + override Setup(fsm : FSM)
    + override EnterState()
    + override Update()
    + override ExitState()
}

class InfectedState extends HealthState 
{
    - timer : Timer
    
    + override Setup(fsm : FSM)
    + override EnterState()
    + override Update()
    + override ExitState()
}

class EventHandler
{
    - eventDictionary : readonly Dictionary<string, Action>
    
    + Raise(string)
    + StartListening(string, Action)
    + StopListening(string, Action)
}

FSM --* HealthStateHandler
EventHandler --* HealthStateHandler
Timer --* DeepWoundState
Timer --*  InfectedState
FSM ..> IState
HealthState ..> EventHandler

@enduml