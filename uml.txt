@startuml

class FSM 
{
    - states : readonly Dictionary<Type, IState>
    -currentState: IState
    
    + AddState(key: Type, value: IState)
    + TransitionTo(type: Type)
    + Update()
}

interface IState 
{
    + Setup(fsm : FSM)
    + EnterState()
    + Update()
    + ExitState()
}


class Timer
{
    + onTimerComplete: Action
    
    + void SetTimer(value: float)
}

class HealthStateHandler 
{
    + playerEvents : readonly Dictionary<Type, Action>
    -fsm: readonly FSM
    
    + Setup()
    + Update()
    + Attack(type: Type)
    + Heal(type: Type)
}

abstract class HealthState implements IState 
{
    + onEnter: Action<Type>
    -handler: HealthStateHandler
    
    + void ReferenceHandler(handler: HealthStateHandler)
    + virtual Setup(fsm : FSM)
    + virtual EnterState()
    + virtual Update()
    + virtual ExitState()
}


class HealthyState extends HealthState 
{
    + override Setup(fsm : FSM)
    + override EnterState()
    + override Update()
    + override ExitState()
}

class InjuredState extends HealthState 
{
    + override Setup(fsm : FSM)
    + override EnterState()
    + override Update()
    + override ExitState()
}

class DeepWoundState extends HealthState 
{
    - timer : Timer
    
    + override Setup(fsm : FSM)
    + override EnterState()
    + override Update()
    + override ExitState()
}

class DownedState extends HealthState 
{
    -recoveryProgress: float
    
    + override Setup(fsm : FSM)
    + override EnterState()
    + override Update()
    + override ExitState()
}

class InfectedState extends HealthState 
{
    + override Setup(fsm : FSM)
    + override EnterState()
    + override Update()
    + override ExitState()
}

HealthStateHandler ..> HealthState
DeepWoundState ..> Timer
FSM ..> IState

note "ASK FEEDBACK" as TimNote
note "The states are now scalable." as StateNote
note "We're kinda missing locomotion and attacks in general..." as DomainNote
note "AI was used as a learning tool for UML in this." as NoteAI

@enduml