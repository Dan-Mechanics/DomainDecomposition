@startuml

class FSM 
{
    - states : readonly Dictionary<Type, IState>
    -currentState: IState
    
    + AddState(key: Type, value: IState)
    + TransitionTo(type: Type)
    + Update()
}

interface IState 
{
    + Setup(fsm : FSM)
    + EnterState()
    + Update()
    + ExitState()
}


class Timer
{
    + onTimerComplete: event Action
    
    + void SetTimer(value: float)
}

class HealthStateHandler 
{
    + playerEvents : readonly Dictionary<Type, Action>
    -fsm: readonly FSM
    
    + Setup()
    + Update()
    + Attack(type: Type)
    + Heal(type: Type)
}

abstract class HealthState implements IState 
{
    + onEnter: event Action
    + onExit: event Action
    -handler: HealthStateHandler
    -fsm: FSM
    
    + void ReferenceHandler(handler: HealthStateHandler)
    + virtual Setup(fsm : FSM)
    + virtual EnterState()
    + virtual Update()
    + virtual ExitState()
}


class HealthyState extends HealthState 
{
    + override Setup(fsm : FSM)
    + override EnterState()
    + override Update()
    + override ExitState()
}

class InjuredState extends HealthState 
{
    + override Setup(fsm : FSM)
    + override EnterState()
    + override Update()
    + override ExitState()
}

class DeepWoundState extends HealthState 
{
    - timer : Timer
    
    + override Setup(fsm : FSM)
    + override EnterState()
    + override Update()
    + override ExitState()
}

class DownedState extends HealthState 
{
    -recoveryProgress: float
    
    + override Setup(fsm : FSM)
    + override EnterState()
    + override Update()
    + override ExitState()
}

class InfectedState extends HealthState 
{
    - timer : Timer
    
    + override Setup(fsm : FSM)
    + override EnterState()
    + override Update()
    + override ExitState()
}

note "Might have instances of HealthState in HealthStateHandler for events." as TimNote

HealthStateHandler -- HealthState
HealthStateHandler ..> FSM
DeepWoundState ..> Timer
InfectedState ..> Timer
FSM ..> IState
HealthStateHandler ..> TimNote

@enduml