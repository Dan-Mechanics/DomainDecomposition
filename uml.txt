@startuml

class FSM 
{
    + states : readonly Dictionary<Type, T>
    + AddState(state : T)
    + TransitionTo(type : Type)
    + Update()
}

interface IState 
{
    + Setup(fsm)
    + EnterState()
    + Update()
    + ExitState()
}

class HealthStateHandler extends FSM
{
    + Setup()
    + Update()
    + TakeHit()
}

abstract class HealthState implements IState 
{
    + OnEnter : Action<Type>
    # FSM fsm
    + virtual EnterState()
    + virtual ExitState()
    + virtual Setup(fsm : FSM)
    + virtual Update()
    + virtual TakeHit()
}


class HealthyState extends HealthState 
{
    + override EnterState()
    + override ExitState()
    + override Setup(fsm : FSM)
    + override Update()
    + override TakeHit()
}

class InjuredState extends HealthState 
{
    + override EnterState()
    + override ExitState()
    + override Setup(fsm : FSM)
    + override Update()
    + override TakeHit()
}

class DownedState extends HealthState 
{
    + override EnterState()
    + override ExitState()
    + override Setup(fsm : FSM)
    + override Update()
    + override TakeHit()
}



note "Is this making sense?" as TimNote
note "We could add more states than this like INFECTED." as StateNote

@enduml